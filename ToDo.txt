Glossar:
keywords/Topics = Begriffe
---Generell---
Muss:

---Analyse Ansicht---
Muss:
1. Fehlerbehandlung (Alle möglichen Urls behandeln/berücksichtigen)
    -> hide the .results-class
(Tom) 2. Browser Funktionen nutzbar machen (Reload, Back, Forward)
-> Back, Forward fertig. Sollte nochmal richtig getestet werden.
-> Reload wahrscheinlich nur mit temporären Cookies möglich -> besser Kubek fragen
Weniger wichtig:
(Alex) 1. Benutzerhilfe / Google Such API auch nach deutsch umstellen können (evtl. Balken oben rechts, neben DocAnalyser, ein kleiner "Flaggen" Button,
um die gewünschte Sprache auszuwählen)
(Alex) 2. Den fixen Balken (linker Abschnitt, der scrollbar ist) in der Breite verändern können

---Chronik Ansicht---
Muss:
(Tom) 1. Suchlauf speichern
    -> Alternative suchen für broadcast und listener
    -> Alternative für das Deklarieren des KeywordsMenuCtrl in der search.html
    (KeywordsMenuCtrl ist in der Chronicle View nicht ansprechbar, weil er nicht im $scope ist / in einer anderen ui-view)
(Alex) 2. Suchläufe gemäß Filteroption anzeigen. Orientierung an die Firefox Chronik Sidebar (Heute, Gestern, Letzte 7 Tage...)
    -> https://www.w3schools.com/angular/angular_filters.asp
    -> https://codeutopia.net/blog/2014/11/10/angularjs-best-practices-avoid-using-ng-repeats-index/
    -> In einem query Objekt gibt es die Property date, die ein Date() Objekt enthält, welches beim Laden der Seite
    erstellt wurde ( siehe $scope.populateLocalStorage() in app.js ).
    -> https://www.w3schools.com/jsref/jsref_obj_date.asp
(Alex, Ja ich hasse CSS :D ) 5. CSS
    -> Vorschlag: Auch ähnlich der Firefox Chronik Sidebar, also die gefilterten URLs untereinander anzeigen;
    Die komplette Url ist ein Button; Button aber als solches nicht sichtbar, erst wenn man mit der Maus drüber schwebt


Weniger wichtig:
(Alex) 1. favicon
2. Fehlermeldung, wenn Browser Local Storage nicht unterstützt
    -> technische funktion bereits in app.js -> RequestCtrl